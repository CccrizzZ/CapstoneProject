{"version":3,"sources":["components/Store.js","components/UserLibrary.js","components/P2PMarketplace.js","asset/ggicon1.png","asset/bg.jpg","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Store","props","BuyGame","gid","price","e","a","console","log","ShowPopup","ConnectedContract","methods","send","from","WalletAddr","value","on","error","alert","HidePopup","this","result","GetAllListing","GetAllStoreListing","call","setState","AllListings","tempArr","i","state","length","axios","get","URI","then","response","obj","image","data","desc","description","push","catch","ImageArr","RenderListingImage","alt","src","GetDescription","ListGroup","Item","id","RenderStore","map","x","Card","style","width","height","Body","backgroundColor","Title","name","Text","marginTop","variant","GID","publisher","window","web3","utils","fromWei","Button","onClick","minHeight","Component","client","NFTStorage","token","UserLibrary","VerifyGameOwnerShip","tokenID","ownerOf","owner","RenderGuestPage","GetPlayerLibrary","IsConnected","GetMyLibrary","TokenIDArray","tokenURI","PlayerLibrary","RenderPlayerLibraryCard","Img","RenderPlayerLibrary","ShowGameSubmitModal","ShowGameSubmitPanel","CloseGameSubmitModal","SubmitPitch","GameName","GameTitleInput","current","GameDescription","GameDescInput","GamePics","GamePicsInput","files","GamePrice","toWei","GamePriceInput","toString","store","metadata","url","GetMySubmission","GetMyGamePitch","DevSubmissionListing","RenderMySubmission","UserRole","href","target","rel","approved","rejected","GetUnclaimedIncomeAmount","CheckUnclaimedRevenue","UnclaimedRevenue","ClaimIncome","WithdrawRevenue","RenderDeveloperMintShop","Container","Row","Col","hits","withBorder","withGlow","minLength","size","padding","digitSpacing","segmentThickness","segmentSpacing","segmentActiveColor","segmentInactiveColor","borderThickness","glowStrength","glowSize","Table","border","marginLeft","marginRight","bordered","striped","hover","Modal","show","backdrop","keyboard","Header","Form","Group","className","Label","Control","ref","type","placeholder","as","rows","maxWidth","Footer","GetAllPitch","GetAllGamePitch","AdminAllGamePitch","RenderAllPitch","wordBreak","ApprovePitch","RejectPitch","address","ApproveGameByDevID","RejectGameByDevID","CheckTipJar","AdminTipjar","TouchTipJar","SetUserRole","AdminSetRoleAddr","AdminSetRoleNumber","SetRole","GetTargetPlayerLibrary","AdminGetUserLibAddr","TargetPlayerLibrary","toBN","TargetPlayerLibraryArray","RenderTargetUserLib","RenderAdminHub","InputGroup","FormControl","disabled","margin","marginBottom","RenderUserLibrary","StoreListing","MyIncome","AdminAllSubmissionListing","React","createRef","P2PMarketplace","PostListing","Purchase","TogglePurchaseModel","temp","RenderP2PCard","img","ConnectedWalletAddr","onHide","closeButton","Home","Init","detectEthereumProvider","provider","Web3","contract","eth","Contract","ContractABI","TargetContractAddr","selectedAddress","UpdateRole","UpdateName","GetMyRole","GetMyDisplayName","UserDisplayName","SubmitNewName","UserNameInput","SetWaiting","SetMyDisplayName","SetIdle","SetChangingNameOff","RegisterAsPlayer","SetMeToPlayer","RegisterAsDeveloper","SetMeToDeveloper","RenderHome","Spinner","animation","role","ActivePage","IsWalletConnected","RenderCards","GotoLibrary","GotoStore","GotoP2P","ScrollToTop","scrollTo","isWaitingForBlockchain","SetChangingName","isChangingName","RenderUserInfoCard","diameter","seed","jsNumberForAddress","OverlayTrigger","placement","overlay","Tooltip","fontSize","borderRadius","background","display","autoFocus","maxLength","TargetContract","backgroundImage","bg","color","backgroundSize","Navbar","ggicon1","ButtonGroup","position","bottom","right","zIndex","centered","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ca09a4b.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { \r\n    Button, \r\n    Card,\r\n    ListGroup,\r\n} from 'react-bootstrap'\r\nimport './Box.css'\r\nimport axios from 'axios'\r\n\r\n\r\nexport default class Store extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        // wallet address from parent component\r\n        this.state = {\r\n            AllListings: null,\r\n            ImageArr: null,\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount(){\r\n\r\n        // get all store listings\r\n        await this.GetAllListing()\r\n    }\r\n\r\n    // playe buy game from store\r\n    BuyGame = async (gid, price, e) => {\r\n\r\n        \r\n        console.log(gid, price)\r\n\r\n        // show pop over\r\n        this.props.ShowPopup()\r\n\r\n        // call contract\r\n        let result = await this.props.ConnectedContract.methods.BuyGame(gid)\r\n        .send({\r\n            from: this.props.WalletAddr,\r\n\r\n            // send token to smart contract\r\n            value: price\r\n        }).on('error', async (error) => {\r\n            alert(\"Error: Transaction Failed\")\r\n            this.props.HidePopup()\r\n        })\r\n        console.log(result)\r\n\r\n        alert(\"Transaction Success!\")\r\n\r\n        // hide pop over\r\n        this.props.HidePopup()\r\n    }\r\n\r\n    // pull all listing from contract\r\n    GetAllListing = async () => {\r\n        \r\n\r\n        // show pop over\r\n        this.props.ShowPopup()\r\n\r\n        // call contract\r\n        let result = await this.props.ConnectedContract.methods.GetAllStoreListing()\r\n        .call({\r\n            from: this.props.WalletAddr \r\n        })\r\n        console.log(\"All listing from blockchain: \\n\" + result)\r\n        // hide pop over\r\n        this.props.HidePopup()\r\n        \r\n        // store to state\r\n        this.setState({AllListings: result}) \r\n\r\n        // temp array for data\r\n        let tempArr = []\r\n\r\n        for (let i = 0; i < this.state.AllListings.length; i++) {\r\n\r\n            // send get request to the uri\r\n            await axios.get(this.state.AllListings[i].URI)\r\n            .then((response) => {\r\n\r\n                let obj = {\r\n                    image: response.data.image,\r\n                    desc: response.data.description\r\n                }\r\n                \r\n                // push obj into temp array\r\n                tempArr.push(obj)\r\n\r\n            })\r\n            .catch((error) => {\r\n                // handle error\r\n                console.log(error)\r\n            })    \r\n        }\r\n\r\n        this.setState({ImageArr: tempArr})\r\n    }\r\n\r\n\r\n    // render image for each listing \r\n    RenderListingImage = (i) => {\r\n        return (<img alt=\"s\" src={this.state.ImageArr[i].image} />)\r\n    }\r\n\r\n    // render descritions for games\r\n    GetDescription = (i) => {\r\n        return (<ListGroup.Item id=\"darklistgroup\">Description: {this.state.ImageArr[i].desc}</ListGroup.Item>)\r\n    }\r\n\r\n    // store page\r\n    RenderStore = () => {\r\n        return(\r\n            this.state.AllListings.map((x, i=0) => {\r\n                return(\r\n                    <Card key={i} style={{ width: '100%', height: \"fit-content\"}}>\r\n                        {this.state.ImageArr === null ? null : this.RenderListingImage(i) }\r\n                        <Card.Body style={{backgroundColor: '#343a40'}}>\r\n                            <Card.Title>{x.name}</Card.Title>\r\n                            <Card.Text>\r\n                                <ListGroup style={{marginTop:\"20px\"}} variant=\"flush\">\r\n                                    <ListGroup.Item id=\"darklistgroup\">GID: {x.GID}</ListGroup.Item>\r\n                                    {this.state.ImageArr === null ? null : this.GetDescription(i)}\r\n                                    <ListGroup.Item id=\"darklistgroup\">Publisher: {x.publisher}</ListGroup.Item>\r\n                                    <ListGroup.Item id=\"darklistgroup\">Price: {window.web3.utils.fromWei(x.price)} Dev</ListGroup.Item>\r\n                                </ListGroup>\r\n                            </Card.Text>\r\n                            <Button variant=\"success\" onClick={(e) => this.BuyGame(x.GID, x.price, e)}>Purchase</Button>\r\n                        </Card.Body>\r\n                    </Card>\r\n                )\r\n            } )\r\n        )\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"modulebox\" style={{minHeight: '80vh'}}>\r\n                <h2>Store Page</h2>\r\n                <hr />\r\n                <div id=\"griddisplay\">\r\n                    {this.state.AllListings === null ? null : this.RenderStore()}\r\n                </div>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { \r\n    Button, \r\n    Card, \r\n    Modal,\r\n    InputGroup, \r\n    FormControl, \r\n    Container,\r\n    Row,\r\n    Col,\r\n    Table,\r\n    Form,\r\n    ListGroup\r\n} from 'react-bootstrap'\r\nimport './Box.css'\r\nimport RetroHitCounter from 'react-retro-hit-counter';\r\nimport axios from 'axios'\r\nimport { NFTStorage } from 'nft.storage'\r\nconst client = new NFTStorage({ token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweEUzNzczNjBEYTFBRDlmZkU3ZDg1QjcyQTZBMjk1NEUyN0UzZTI3MDgiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY1MDgzMjE2MDIwOSwibmFtZSI6IkRldmVsb3BtZW50LWtleSJ9.fBVoPVoh1z3j6OnPmpzTcjFp-o6QibxhCM_-En31IvI' })\r\n\r\n\r\n\r\nexport default class UserLibrary extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        // wallet address from parent component\r\n        this.state = {\r\n            ShowGameSubmitPanel: false,\r\n            UnclaimedRevenue: null,\r\n            StoreListing: null,\r\n            DevSubmissionListing: null,\r\n            MyIncome: null,\r\n            AdminAllSubmissionListing: null,\r\n            AdminTipjar: null,\r\n            AdminAllGamePitch: null,\r\n            PlayerLibrary: null,\r\n            TargetPlayerLibrary: null,\r\n            TargetPlayerLibraryArray: null\r\n        }\r\n\r\n        // refs\r\n        this.GameTitleInput = React.createRef()\r\n        this.GameDescInput = React.createRef()\r\n        this.GamePicsInput = React.createRef()\r\n        this.GamePriceInput = React.createRef()\r\n        this.AdminSetRoleAddr = React.createRef()\r\n        this.AdminSetRoleNumber = React.createRef()\r\n        this.AdminGetUserLibAddr = React.createRef()\r\n\r\n\r\n\r\n    }\r\n    \r\n    \r\n\r\n    async componentDidMount(){\r\n\r\n        // init according to user role\r\n        switch (this.props.UserRole) {\r\n            case 'Developer':\r\n                console.log(\"Developer init\")\r\n                await this.GetUnclaimedIncomeAmount()\r\n                await this.GetMySubmission()\r\n                break;\r\n            case 'Guest':\r\n                console.log(\"Guest init\")\r\n                break;\r\n            case 'Player':\r\n                await this.GetPlayerLibrary()\r\n                console.log(\"Player init\")\r\n                break;\r\n            case 'Admin':\r\n                console.log(\"Admin init\")\r\n                await this.GetAllPitch()\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    // verify ownership with smart contract\r\n    // called when starting game\r\n    VerifyGameOwnerShip = async (tokenID) => {\r\n\r\n        // call smart contract\r\n        let owner = await this.props.ConnectedContract.methods.ownerOf(tokenID)\r\n        .call({\r\n            from: this.props.WalletAddr \r\n        })\r\n\r\n        // return if owner equals to connected wallet\r\n        return (owner === this.props.WalletAddr)\r\n\r\n    }\r\n\r\n\r\n\r\n    // Guest page \r\n    RenderGuestPage = () => {\r\n        return(\r\n            <div id=\"modulebox\" style={{height: '80vh'}}>\r\n                <hr />\r\n                <h2>please register as player first</h2>\r\n                <hr />\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    \r\n    \r\n    GetPlayerLibrary = async () => {\r\n        // check wallet connection\r\n        if(!this.props.IsConnected()) return\r\n\r\n        // show pop over\r\n        this.props.ShowPopup()\r\n\r\n        // call smart contract\r\n        let TokenIDArray = await this.props.ConnectedContract.methods.GetMyLibrary()\r\n        .call({\r\n            from: this.props.WalletAddr \r\n        })\r\n        console.log(TokenIDArray)\r\n\r\n\r\n        // temp array for data\r\n        let tempArr = []\r\n\r\n        // loop user owned token array\r\n        for (let i = 0; i < TokenIDArray.length; i++) {\r\n            let URI = await this.props.ConnectedContract.methods.tokenURI(TokenIDArray[i])\r\n            .call({\r\n                from: this.props.WalletAddr \r\n            })\r\n            console.log(URI)\r\n\r\n            \r\n            // send get request to the uri\r\n            await axios.get(URI)\r\n            .then((response) => {\r\n                \r\n                // construct new data obj\r\n                let obj = {\r\n                    name: response.data.name,\r\n                    image: response.data.image,\r\n                    desc: response.data.description\r\n                }\r\n\r\n                // push it into temp array\r\n                tempArr.push(obj)\r\n\r\n            })\r\n            .catch((error) => {\r\n                // handle error\r\n                console.log(error)\r\n            })\r\n\r\n        }\r\n\r\n        console.log(tempArr)\r\n\r\n    \r\n\r\n        // store player library in state\r\n        this.setState({ PlayerLibrary: tempArr })\r\n\r\n\r\n        // hide pop over\r\n        this.props.HidePopup()\r\n        \r\n        \r\n    }\r\n    \r\n\r\n    \r\n    RenderPlayerLibraryCard = () => {\r\n        return(\r\n            this.state.PlayerLibrary.map((x, i=0) => {\r\n                return(\r\n                    <Card key={i} style={{ width: '100%', height: \"fit-content\"}}>\r\n                        <Card.Img variant=\"top\" src={x.image}/>\r\n                        <Card.Body style={{backgroundColor: '#343a40'}}>\r\n                            <Card.Title>{x.name}</Card.Title>\r\n                            <Card.Text>\r\n                                <hr/>\r\n                                Description: {x.desc}\r\n                                <hr/>\r\n                            </Card.Text>\r\n                            <Button variant=\"primary\" onClick={this.VerifyGameOwnerShip}>Play</Button>\r\n                        </Card.Body>\r\n                    </Card>\r\n                )\r\n            } )\r\n        )\r\n    }\r\n\r\n\r\n    // player library\r\n    RenderPlayerLibrary = () => {\r\n        return(\r\n            <div id=\"modulebox\">\r\n                <h2>My Library</h2>\r\n                <hr />\r\n\r\n\r\n                <Button id=\"purplebutton\" onClick={this.GetPlayerLibrary}>Refresh</Button>\r\n\r\n                <div id=\"griddisplay\" style={{ minHeight: \"80vh\", height: \"100%\", marginTop: \"20px\"}}>\r\n                    {this.state.PlayerLibrary ? this.RenderPlayerLibraryCard() : null}\r\n\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n    // developer hub\r\n    // show or clsoe developer pitching modal\r\n    ShowGameSubmitModal = () => {\r\n        this.setState({ShowGameSubmitPanel: true})\r\n    }\r\n    CloseGameSubmitModal = () => {\r\n        this.setState({ShowGameSubmitPanel: false})\r\n    }\r\n\r\n\r\n    // developer submit IPFS links containing their pitch\r\n    // if approved it will be listed on the marketplace\r\n    SubmitPitch = async () => {\r\n\r\n        // get game description, name, and pictures\r\n        let GameName = this.GameTitleInput.current.value\r\n        let GameDescription = this.GameDescInput.current.value\r\n        let GamePics = this.GamePicsInput.current.files[0]\r\n        let GamePrice = window.web3.utils.toWei(this.GamePriceInput.current.value.toString(), 'ether')\r\n\r\n        console.log(GameName)\r\n        console.log(GameDescription)\r\n        console.log(GamePics)\r\n        console.log(GamePrice)\r\n\r\n\r\n        // null check on input\r\n        if (GameName === \"\" || GameDescription === \"\" || GamePrice === \"\") {\r\n            alert(\"Please complete the form\")\r\n            return\r\n        }\r\n\r\n        // show pop over\r\n        this.props.ShowPopup()\r\n\r\n\r\n        // store description and image on ipfs storage\r\n        const metadata = await client.store({\r\n            name: GameName,\r\n            description: GameDescription,\r\n            image: GamePics\r\n        }) \r\n        console.log(metadata)\r\n\r\n\r\n        // store ipfs link in contract \r\n        // func(string memory name, uint256 price, string memory URI)\r\n        const result = await this.props.ConnectedContract.methods.SubmitPitch(GameName, GamePrice, metadata.url)\r\n        .send({\r\n            from: this.props.WalletAddr\r\n        }).on('error', async (error) => {\r\n            alert(\"Error: Transaction Failed\")\r\n            // hide pop over\r\n            this.props.HidePopup()\r\n        })\r\n        console.log(result)\r\n\r\n        alert(\"Submission success!\")\r\n        \r\n        // hide pop over\r\n        this.props.HidePopup()\r\n\r\n        // hide submit panel\r\n        this.CloseGameSubmitModal()\r\n\r\n    }\r\n\r\n\r\n    // pull submission array from smart contract\r\n    GetMySubmission = async () => {\r\n\r\n        // check wallet connection\r\n        if(!this.props.IsConnected()) return\r\n        \r\n        // show pop over\r\n        this.props.ShowPopup()\r\n\r\n        // call smart contract function\r\n        // \"0\": \"tuple(uint256,string,uint256,string,bool,bool)[]: 1,aaa,1,aaaaaaa,false,false\"\r\n        let result = await this.props.ConnectedContract.methods.GetMyGamePitch()\r\n        .call({\r\n            from: this.props.WalletAddr \r\n        })\r\n\r\n        console.log(result)\r\n\r\n        // store submission listing in state\r\n        this.setState({ DevSubmissionListing: result })\r\n\r\n        // hide pop over\r\n        this.props.HidePopup()\r\n    }\r\n\r\n\r\n\r\n    // render developer submission table\r\n    RenderMySubmission = () => {\r\n\r\n        // gname\r\n        // uri\r\n        // price\r\n        // approved = false\r\n        // rejected\r\n        // live\r\n        if(this.props.UserRole !== \"Developer\") return\r\n\r\n        // the link looks like this\r\n        // ipfs://bafyreihwlk5ab2gbmrxet4oorugopvzowqnf4ulq6ztxqztp74gdlcg6ee/metadata.json\r\n\r\n        return(\r\n            this.state.DevSubmissionListing.map((x, i) => {\r\n                return(\r\n                    <tr key={i}>\r\n                        <td>{x.name}</td>\r\n                        <td><a id=\"wrapAnchor\" href={x.URI} target=\"_blank\" rel=\"noreferrer\">{x.URI}</a></td>\r\n                        <td>{window.web3.utils.fromWei(x.price)}</td>\r\n                        <td>{x.approved.toString()}</td>\r\n                        <td>{x.rejected.toString()}</td>\r\n                    </tr>\r\n                )\r\n            } )\r\n        )\r\n        \r\n        \r\n    }\r\n\r\n\r\n    GetUnclaimedIncomeAmount = async () => {\r\n        // show pop over\r\n        this.props.ShowPopup()\r\n\r\n        // call contract\r\n        let result = await this.props.ConnectedContract.methods.CheckUnclaimedRevenue()\r\n        .call({\r\n            from: this.props.WalletAddr \r\n        })\r\n        \r\n        // hide pop over\r\n        this.props.HidePopup()\r\n        \r\n        // store to state\r\n        this.setState({UnclaimedRevenue: result})\r\n    }\r\n\r\n\r\n    // developer claim income\r\n    ClaimIncome = async () => {\r\n\r\n        // show pop over\r\n        this.props.ShowPopup()\r\n\r\n        // call smart constract\r\n        const result = await this.props.ConnectedContract.methods.WithdrawRevenue()\r\n        .send({\r\n            from: this.props.WalletAddr\r\n        }).on('error', async (error) => {\r\n            alert(\"Error: Transaction Failed\")\r\n            // hide pop over\r\n            this.props.HidePopup()\r\n        })\r\n        console.log(result)\r\n\r\n        \r\n        // refresh unclaimed income counter\r\n        this.GetUnclaimedIncomeAmount()\r\n        \r\n        // hide pop over\r\n        this.props.HidePopup()\r\n    }\r\n\r\n\r\n    // developers submit their games here for admin to review\r\n    RenderDeveloperMintShop = () => {\r\n        return(\r\n            <div id=\"modulebox\" style={{minHeight: '80vh'}}>\r\n                <h2>Developer Hub</h2>\r\n                <hr />\r\n                <Container>\r\n                    <Row>\r\n                        <Col id=\"col2\">\r\n                            <h4>Functions</h4>\r\n                            <hr/>\r\n                            <Button id=\"purplebutton\" onClick={this.ShowGameSubmitModal}>Submit New Game</Button>\r\n                            <br/>\r\n                            <Button id=\"purplebutton\" onClick={this.ClaimIncome}>Claim Sales Revenue</Button>\r\n                        </Col>\r\n                        <Col id=\"col2\">\r\n                            <h4>Unclaimed Sales Revenue</h4>\r\n                            <hr/>\r\n\r\n                            <RetroHitCounter\r\n                                hits={this.state.UnclaimedRevenue == null ? 0 : this.state.UnclaimedRevenue}\r\n                                withBorder={true}\r\n                                withGlow={true}\r\n                                minLength={19}\r\n                                size={25}\r\n                                padding={4}\r\n                                digitSpacing={3}\r\n                                segmentThickness={4}\r\n                                segmentSpacing={0.5}\r\n                                segmentActiveColor=\"#76FF03\"\r\n                                segmentInactiveColor=\"#315324\"\r\n                                backgroundColor=\"#222222\"\r\n                                borderThickness={7}\r\n                                glowStrength={0.5}\r\n                                glowSize={4}\r\n                            />\r\n                            <hr/>\r\n                            <p>Revenue calculated in wei</p>\r\n                            <p>1 Wei = 1 GLMR(10)<sup>-18</sup></p>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n                <hr/>\r\n\r\n\r\n\r\n                {/* existing pitch */}\r\n                <h4>My Game Pitch</h4>\r\n                <br />\r\n                <Button id=\"purplebutton\" onClick={this.GetMySubmission}>Refresh</Button>\r\n                <hr />\r\n                <Table style={{border: \"2px solid black\", marginLeft:\"auto\", marginRight:\"auto\"}} variant=\"warning\" bordered size=\"sm\" striped hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Game Name</th>\r\n                            <th>IPFS URL</th>\r\n                            <th>Price (GLMR)</th>\r\n                            <th>Approved</th>\r\n                            <th>Rejected</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.DevSubmissionListing == null ? null : this.RenderMySubmission()}\r\n                    </tbody>\r\n                </Table>\r\n\r\n\r\n\r\n\r\n                {/* upload panel for developers */}\r\n                <Modal\r\n                    show={this.state.ShowGameSubmitPanel}\r\n                    backdrop=\"static\"\r\n                    keyboard={false}\r\n                >\r\n                    <Modal.Header>\r\n                        <Modal.Title>💾 Submit Pitch</Modal.Title>\r\n                        \r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Form>\r\n                            <Form.Group className=\"mb-3\">\r\n                                <Form.Label>🎮 Game title:</Form.Label>\r\n                                <Form.Control ref={this.GameTitleInput} type=\"text\" placeholder=\"Enter your game title\" />\r\n                            </Form.Group>\r\n                            <Form.Group className=\"mb-3\">\r\n                                <Form.Label>🧾 Game Description:</Form.Label>\r\n                                <Form.Control ref={this.GameDescInput} placeholder=\"Enter your game description\" as=\"textarea\" rows={3} />\r\n                            </Form.Group>\r\n                            <Form.Group className=\"mb-3\">\r\n                                <img style={{maxWidth:\"80px\"}} src=\"https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/ipfs/ipfs.png\" alt=\"ipfs\"/>\r\n                                <br/>\r\n                                <Form.Label> Demo Pictures (one single picture)</Form.Label>\r\n                                <Form.Control ref={this.GamePicsInput} type=\"file\" size=\"sm\" />\r\n                            </Form.Group>\r\n                            <Form.Group className=\"mb-3\">\r\n                                <Form.Label>💰 Your Price (in DEV):</Form.Label>\r\n                                <Form.Control ref={this.GamePriceInput} type=\"number\" placeholder=\"Enter 0 if you want it to be free\" />\r\n                            </Form.Group>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={this.CloseGameSubmitModal}>Cancel</Button>\r\n                        <Button variant=\"primary\" onClick={this.SubmitPitch}>Submit</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n    \r\n            </div>\r\n        )\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n    // pull all game pitch from contract\r\n    GetAllPitch = async () => {\r\n        // show pop over\r\n        this.props.ShowPopup()\r\n        \r\n        // call contract\r\n        let result = await this.props.ConnectedContract.methods.GetAllGamePitch()\r\n        .call({\r\n            from: this.props.WalletAddr \r\n        })\r\n        console.log(result)\r\n\r\n        // store to state\r\n        this.setState({AdminAllGamePitch: result})\r\n    \r\n        // hide pop over\r\n        this.props.HidePopup()\r\n    }\r\n\r\n\r\n    // render all game pitch for admin\r\n    RenderAllPitch = () => {\r\n        // check user role\r\n        if(this.props.UserRole !== \"Admin\") return\r\n\r\n        // render the table rows\r\n        return(\r\n            this.state.AdminAllGamePitch.map((x, i) => {\r\n                return(\r\n                    <tr key={i}>\r\n                        <td><p style={{wordBreak: \"break-all\"}}>{x.name}</p></td>\r\n                        <td>{x.publisher}</td>\r\n                        <td><a id=\"wrapAnchor\" href={x.URI} target=\"_blank\" rel=\"noreferrer\">{x.URI}</a></td>\r\n                        <td>{window.web3.utils.fromWei(x.price)}</td>\r\n                        <td><Button variant=\"success\" onClick={(e) => this.ApprovePitch(x.publisher, x.GID, e)}>Go</Button></td>\r\n                        <td><Button variant=\"danger\" onClick={(e) => this.RejectPitch(x.publisher, x.GID, e)}>Go</Button></td>\r\n\r\n                    </tr>\r\n                )\r\n            } )\r\n        )\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n    // approve game pitch\r\n    ApprovePitch = async (address, gid, e) => {\r\n\r\n        console.log(address, gid, e)\r\n\r\n\r\n\r\n        // show pop over\r\n        this.props.ShowPopup()\r\n\r\n        // approve\r\n        let result = await this.props.ConnectedContract.methods.ApproveGameByDevID(address, gid-1)\r\n        .send({\r\n            from: this.props.WalletAddr\r\n        }).on('error', async (error) => {\r\n            alert(\"Error: Transaction Failed\")\r\n            // hide pop over\r\n            this.props.HidePopup()\r\n        })\r\n        console.log(result)\r\n        alert(\"Pitch Approved!\")\r\n        \r\n\r\n        // hide pop over\r\n        this.props.HidePopup()\r\n        \r\n        // refresh all pitch list\r\n        this.GetAllPitch()    \r\n    }\r\n\r\n\r\n\r\n\r\n    // reject game pitch\r\n    RejectPitch = async (address, gid) => {\r\n        // show pop over\r\n        this.props.ShowPopup()\r\n\r\n        // reject\r\n        let result = await this.props.ConnectedContract.methods.RejectGameByDevID(address, gid)\r\n        .send({\r\n            from: this.props.WalletAddr\r\n        }).on('error', async (error) => {\r\n            alert(\"Error: Transaction Failed\")\r\n            // hide pop over\r\n            this.props.HidePopup()\r\n        })\r\n        console.log(result)\r\n\r\n        alert(\"Pitch Rejected!\")\r\n        \r\n        // hide pop over\r\n        this.props.HidePopup()\r\n\r\n        // refresh all pitch list\r\n        this.GetAllPitch()\r\n    }\r\n\r\n\r\n\r\n\r\n    // get admin tipjar amount\r\n    CheckTipJar = async () => {\r\n        // show pop over\r\n        this.props.ShowPopup()\r\n\r\n\r\n        let result = await this.props.ConnectedContract.methods.CheckTipJar()\r\n        .call({\r\n            from: this.props.WalletAddr \r\n        })\r\n\r\n        // store to state\r\n        this.setState({AdminTipjar: result})\r\n    \r\n        // hide pop over\r\n        this.props.HidePopup()\r\n    }\r\n\r\n\r\n    // collect platform income from tipjar\r\n    TouchTipJar = async () => {\r\n\r\n        // null check on tipjar\r\n        if(this.state.AdminTipjar == null || this.state.AdminTipjar === 0 || this.state.AdminTipjar === \"0\")\r\n        {\r\n            alert(\"Tipjar is empty!\")\r\n            return\r\n        }\r\n\r\n\r\n        // show pop over\r\n        this.props.ShowPopup()\r\n\r\n        // call contract\r\n        let result = await this.props.ConnectedContract.methods.TouchTipJar()\r\n        .send({\r\n            from: this.props.WalletAddr\r\n        }).on('error', async (error) => {\r\n            alert(\"Error: Transaction Failed\")\r\n            // hide pop over\r\n            this.props.HidePopup()\r\n        })\r\n        console.log(result)\r\n        alert(\"Income Collected!\")\r\n\r\n        // hide pop over\r\n        this.props.HidePopup()\r\n    }\r\n\r\n\r\n    // set role for certain user\r\n    SetUserRole = async () => {\r\n        // 0 = guest\r\n        // 1 = player\r\n        // 2 = developer\r\n        // 3 = admin\r\n\r\n        console.log(this.AdminSetRoleAddr.current.value)\r\n        console.log(this.AdminSetRoleNumber.current.value)\r\n\r\n\r\n        // show pop over\r\n        this.props.ShowPopup()\r\n\r\n        // call contract\r\n        let result = await this.props.ConnectedContract.methods.SetRole(this.AdminSetRoleAddr.current.value, this.AdminSetRoleNumber.current.value)\r\n        .send({\r\n            from: this.props.WalletAddr\r\n        }).on('error', async (error) => {\r\n            alert(\"Error: Transaction Failed\")\r\n            // hide pop over\r\n            this.props.HidePopup()\r\n        })\r\n        console.log(result)\r\n        alert(\"Role set success!\")\r\n\r\n        // hide pop over\r\n        this.props.HidePopup()\r\n\r\n\r\n    }\r\n\r\n\r\n    // get certain players library\r\n    GetTargetPlayerLibrary = async () => {\r\n    \r\n        if(this.AdminGetUserLibAddr.current.value.length < 1) {\r\n            alert(\"Please enter the user address\")\r\n            return\r\n        }\r\n\r\n        // show pop over\r\n        this.props.ShowPopup()\r\n\r\n        console.log(this.AdminGetUserLibAddr.current.value)\r\n\r\n        // get user owned token id array\r\n        let result = await this.props.ConnectedContract.methods.GetPlayerLibrary(this.AdminGetUserLibAddr.current.value)\r\n        .call({\r\n            from: this.props.WalletAddr \r\n        })\r\n        console.log(result)\r\n\r\n        // store to state\r\n        this.setState({ TargetPlayerLibrary: result })\r\n\r\n\r\n        // array for storing data\r\n        let tempArr = []\r\n\r\n        // loop user owned token array\r\n        for (let i = 0; i < this.state.TargetPlayerLibrary.length; i++) {\r\n\r\n            let URI = await this.props.ConnectedContract.methods.tokenURI(window.web3.utils.toBN(this.state.TargetPlayerLibrary[i]))\r\n            .call({\r\n                from: this.props.WalletAddr \r\n            })\r\n\r\n            \r\n            // send get request to the uri\r\n            axios.get(URI)\r\n            .then((response) => {\r\n                \r\n                // construct new data obj\r\n                let obj = {\r\n                    name: response.data.name,\r\n                    image: response.data.image,\r\n                    desc: response.data.description\r\n                }\r\n\r\n                // push it into temp array\r\n                tempArr.push(obj)\r\n\r\n            })\r\n            .catch((error) => {\r\n                // handle error\r\n                console.log(error)\r\n            })\r\n\r\n        }\r\n        \r\n        console.log(tempArr)\r\n\r\n        // store data to state\r\n        this.setState({ TargetPlayerLibraryArray: tempArr })\r\n\r\n        \r\n\r\n    \r\n        // hide pop over\r\n        this.props.HidePopup()\r\n    }\r\n\r\n\r\n    \r\n    RenderTargetUserLib = () => {\r\n        // check user role\r\n        if(this.props.UserRole !== \"Admin\") return\r\n\r\n        // render the table rows\r\n        return(\r\n            this.state.TargetPlayerLibraryArray.map((x, i=0) => {\r\n                return(\r\n                    <tr key={i}>\r\n                        <td><p style={{wordBreak: \"break-all\"}}>{x.name}</p></td>\r\n                        <td>{x.desc}</td>\r\n                        <td><a id=\"wrapAnchor\" href={x.image} target=\"_blank\" rel=\"noreferrer\">IPFS URL</a></td>\r\n                    </tr>\r\n                )\r\n            } )\r\n        )\r\n    }\r\n\r\n\r\n    // admin approve developer's pitch\r\n    RenderAdminHub = () => {\r\n        return(\r\n            <div id=\"modulebox\">\r\n                <h2>Admin Hub</h2>\r\n                <hr />\r\n                {/* control panel */}\r\n                <Container>\r\n                    <Row>\r\n                        <Col id=\"col2\">\r\n                            <InputGroup className=\"mb-3\">\r\n                                <Button onClick={this.CheckTipJar}>CheckTipJar</Button>\r\n                                <FormControl disabled placeholder={this.state.AdminTipjar === null ? null: this.state.AdminTipjar}/>\r\n                            </InputGroup>\r\n                            <Button variant=\"danger\" onClick={this.TouchTipJar}>TouchTipJar</Button>\r\n                            <hr/>\r\n                            <InputGroup className=\"mb-3\">\r\n                                <Button onClick={this.GetTargetPlayerLibrary}>GetUserLibrary</Button>\r\n                                <FormControl ref={this.AdminGetUserLibAddr} placeholder=\"TargetUserWalletAddress\" />\r\n                            </InputGroup>\r\n                            <Table style={{border: \"2px solid black\", marginLeft:\"auto\", marginRight:\"auto\"}} variant=\"success\" bordered size=\"sm\" striped hover>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Game Name</th>\r\n                                        <th>Developer</th>\r\n                                        <th>IPFS URL</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td><p style={{wordBreak: \"break-all\"}}>Example Game</p></td>\r\n                                        <td>example description</td>\r\n                                        <td><a id=\"wrapAnchor\" href={\"example\"} target=\"_blank\" rel=\"noreferrer\">ExampleImage</a></td>\r\n                                    </tr>\r\n                                    {this.state.TargetPlayerLibraryArray === null ? null : this.RenderTargetUserLib()}\r\n                                </tbody>\r\n                            </Table>\r\n                        </Col>\r\n                        <Col id=\"col2\">\r\n                            <ListGroup style={{margin: \"auto\", marginBottom: \"20px\", width: '40%'}} variant=\"flush\">\r\n                                <ListGroup.Item variant=\"dark\">0 = Guest</ListGroup.Item>\r\n                                <ListGroup.Item variant=\"primary\">1 = Player</ListGroup.Item>\r\n                                <ListGroup.Item variant=\"warning\">2 = Developer</ListGroup.Item>\r\n                                <ListGroup.Item variant=\"danger\">3 = Admin</ListGroup.Item>\r\n                            </ListGroup>\r\n                            <InputGroup className=\"mb-3\">\r\n                                <Button onClick={this.SetUserRole}>SetRole</Button>\r\n                                <FormControl ref={this.AdminSetRoleAddr} placeholder=\"Address\" aria-describedby=\"basic-addon1\"/>\r\n                                <FormControl ref={this.AdminSetRoleNumber} placeholder=\"Role\" aria-describedby=\"basic-addon1\"/>\r\n                            </InputGroup>\r\n\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n                <hr />\r\n\r\n                {/* all submitted game pitch */}\r\n                <h4>All Game Pitch</h4>\r\n                <br />\r\n                <Button id=\"purplebutton\" onClick={this.GetAllPitch}>Refresh</Button>\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <Table style={{border: \"2px solid black\", marginLeft:\"auto\", marginRight:\"auto\"}} variant=\"danger\" bordered size=\"sm\" striped hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Game Name</th>\r\n                            <th>Developer</th>\r\n                            <th>IPFS URL</th>\r\n                            <th>Price (GLMR)</th>\r\n                            <th>Approve</th>\r\n                            <th>Reject</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.AdminAllGamePitch === null ? null : this.RenderAllPitch()}\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n    // render library according to role\r\n    // (admin=controlPanel, developer=mintShop, player=library)\r\n    RenderUserLibrary = () => {\r\n        switch (this.props.UserRole) {\r\n            case 'Guest':\r\n                return(this.RenderGuestPage ())\r\n            case 'Player':\r\n                return(this.RenderPlayerLibrary())\r\n            case 'Developer':\r\n                return(this.RenderDeveloperMintShop())\r\n            case 'Admin':\r\n                return(this.RenderAdminHub())\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.RenderUserLibrary()}\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { \r\n    Button, \r\n    Card, \r\n    ListGroup, \r\n    InputGroup, \r\n    FormControl, \r\n    Spinner, \r\n    Navbar,\r\n    Container,\r\n    Modal,\r\n    Form\r\n\r\n} from 'react-bootstrap'\r\nimport './Box.css'\r\n\r\n\r\nexport default class P2PMarketplace extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        // wallet address from parent component\r\n        this.state = {\r\n            show: false,\r\n        }\r\n    }\r\n\r\n    \r\n    // post my token listing\r\n    PostListing = (name, price) => {\r\n\r\n    }\r\n\r\n\r\n    // purchase token by id\r\n    Purchase = (gid) => {\r\n\r\n    }\r\n\r\n    // toggle the model\r\n    TogglePurchaseModel = () => {\r\n        let temp = !this.state.show\r\n        this.setState({ show: temp })\r\n    }\r\n\r\n    RenderP2PCard = (img) => {\r\n        return (\r\n            <Card style={{ width: '100%' }}>\r\n                <Card.Img variant=\"top\" src={img}/>\r\n                <Card.Body style={{backgroundColor: '#343a40'}}>\r\n                    <Card.Title>Example Game</Card.Title>\r\n                    <Card.Text>\r\n                        <hr/>\r\n                        Description: A game about snake eating each other\r\n                        <hr/>\r\n                        Publisher: {this.state.ConnectedWalletAddr}\r\n                        <hr/>\r\n                        Price: 5 Dev\r\n\r\n                    </Card.Text>\r\n                    <Button variant=\"primary\">Purchase</Button>\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"modulebox\">\r\n                <h2>P2P Market place</h2>\r\n                <hr />\r\n                \r\n                {/* the */}\r\n                <div id=\"griddisplay\">\r\n                    {this.RenderP2PCard(\"http://media.steampowered.com/apps/csgo/blog/images/fb_image.png?v=6\")}\r\n                    {this.RenderP2PCard(\"http://media.steampowered.com/apps/csgo/blog/images/fb_image.png?v=6\")}\r\n                    {this.RenderP2PCard(\"http://media.steampowered.com/apps/csgo/blog/images/fb_image.png?v=6\")}\r\n                    {this.RenderP2PCard(\"https://cdn.akamai.steamstatic.com/steam/apps/1046930/capsule_616x353.jpg?t=1621357797\")}\r\n                    {this.RenderP2PCard(\"https://cdn.akamai.steamstatic.com/steam/apps/1046930/capsule_616x353.jpg?t=1621357797\")}\r\n\r\n                </div>\r\n\r\n                <Modal show={this.state.show} onHide={this.TogglePurchaseModel} backdrop=\"static\" keyboard={false}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Modal title</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <ListGroup>\r\n                            <ListGroup.Item>Price: </ListGroup.Item>\r\n                            <ListGroup.Item>Fees: is price x 0.02</ListGroup.Item>\r\n                            <ListGroup.Item>Total: {1000}</ListGroup.Item>\r\n                        </ListGroup>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={this.TogglePurchaseModel}>Close</Button>\r\n                        <Button variant=\"primary\">Understood</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/ggicon1.73d9ed06.png\";","export default __webpack_public_path__ + \"static/media/bg.c7a91897.jpg\";","import React, { Component } from 'react'\r\nimport { \r\n    Button, \r\n    Card,\r\n    Navbar,\r\n    Container,\r\n    ButtonGroup,\r\n    Spinner,\r\n    InputGroup,\r\n    OverlayTrigger,\r\n    Tooltip,\r\n    Modal,\r\n    FormControl\r\n} from 'react-bootstrap'\r\nimport Web3 from 'web3'\r\nimport detectEthereumProvider from '@metamask/detect-provider'\r\nimport Jazzicon, { jsNumberForAddress } from 'react-jazzicon'\r\nimport Store from './Store'\r\nimport UserLibrary from './UserLibrary'\r\nimport P2PMarketplace from './P2PMarketplace'\r\nimport ggicon1 from '../asset/ggicon1.png'\r\nimport bg from '../asset/bg.jpg'\r\nimport ContractABI from './ContractABI.json'\r\nimport './Box.css'\r\n\r\n\r\n// role from smart contract\r\n// 0 Guest\r\n// 1 Player\r\n// 2 Developer\r\n// 3 Admin\r\n\r\n\r\nexport default class Home extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            TargetContractAddr: '0x6BD17918C8D0A756c3631Ec18E1B338BdD83c944',\r\n            ConnectedWalletAddr: null,\r\n            ConnectedContract: null,\r\n            UserRole: null,\r\n            TargetContract: null,\r\n            ActivePage: 'library',\r\n            UserDisplayName: null,\r\n            isWaitingForBlockchain: false,\r\n            isChangingName: false,\r\n        }\r\n\r\n        // refs\r\n        this.UserNameInput = React.createRef()\r\n\r\n    }\r\n    \r\n    async componentDidMount(){\r\n\r\n        // look for metamask\r\n        await this.Init()\r\n    }\r\n\r\n\r\n\r\n\r\n    // connect to the blockchain\r\n    Init = async () => {\r\n\r\n        // create \r\n        console.log(\"Connecting to metamask\")\r\n        const provider = await detectEthereumProvider()\r\n\r\n\r\n        if (provider) {\r\n            // store provider in window\r\n            window.web3 = new Web3(provider)\r\n            let contract = new window.web3.eth.Contract(ContractABI, this.state.TargetContractAddr)\r\n            \r\n            // null check on contract\r\n            if(!contract) { alert(\"Contract Not Found\"); return }\r\n\r\n            // store wallet address\r\n            console.log(provider.selectedAddress)\r\n            this.setState({ ConnectedWalletAddr: provider.selectedAddress })\r\n\r\n            // store contract\r\n            this.setState({ ConnectedContract: contract })\r\n\r\n\r\n        }else {\r\n            alert('MetaMask must be installed to run this DApp.')\r\n            return false\r\n        }\r\n\r\n\r\n        // update user role\r\n        this.UpdateRole()\r\n        this.UpdateName()\r\n    }\r\n\r\n\r\n\r\n    // update user role from smart contract\r\n    UpdateRole = async () => {\r\n\r\n        // call smart contract function\r\n        let result = await this.state.ConnectedContract.methods.GetMyRole()\r\n        .call({\r\n            from: this.state.ConnectedWalletAddr\r\n        })\r\n\r\n        switch (result) {\r\n            case '0':\r\n                this.setState({ UserRole: \"Guest\" })\r\n                break;\r\n            case '1':\r\n                this.setState({ UserRole: \"Player\" })\r\n                break;\r\n            case '2':\r\n                this.setState({ UserRole: \"Developer\" })\r\n                break;\r\n            case '3':\r\n                this.setState({ UserRole: \"Admin\" })\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    \r\n    UpdateName = async () => {\r\n        // call smart contract function\r\n        let result = await this.state.ConnectedContract.methods.GetMyDisplayName()\r\n        .call({\r\n            from: this.state.ConnectedWalletAddr\r\n        })\r\n\r\n        // null check on name\r\n        if(result === null || result === \"\") {\r\n            this.setState({UserDisplayName: null})\r\n            return\r\n        }\r\n\r\n        // store user name\r\n        this.setState({UserDisplayName: result})        \r\n\r\n    }\r\n\r\n\r\n    // set player display name\r\n    SubmitNewName = async () => {\r\n\r\n\r\n        if (this.UserNameInput.current.value === \"\") {\r\n            alert(\"Please enter username\")\r\n            return\r\n        }\r\n        \r\n        // show pop over\r\n        this.SetWaiting()\r\n\r\n        // call smart contract function\r\n        let result = await this.state.ConnectedContract.methods.SetMyDisplayName(this.UserNameInput.current.value)\r\n        .send({\r\n            from: this.state.ConnectedWalletAddr\r\n        }).on('error', async (error) => {\r\n            alert(\"Error: Transaction Failed\")\r\n            // hide pop over\r\n            this.SetIdle()\r\n        })\r\n        console.log(result)\r\n    \r\n        // hide pop over\r\n        this.SetIdle()\r\n        \r\n        // refresh name\r\n        await this.UpdateName()\r\n        this.SetChangingNameOff()\r\n        alert(\"You have set your name to \" + this.state.UserDisplayName)\r\n    }\r\n\r\n    \r\n\r\n    // register guest user to player\r\n    RegisterAsPlayer = async () => {\r\n\r\n        // null check on contract\r\n        if(this.state.ConnectedContract == null) return\r\n\r\n        // show pop over\r\n        this.SetWaiting()\r\n\r\n        // call smart contract function\r\n        let result = await this.state.ConnectedContract.methods.SetMeToPlayer()\r\n        .send({\r\n            from: this.state.ConnectedWalletAddr\r\n        }).on('error', async (error) => {\r\n            alert(\"Error: Transaction Failed\")\r\n            // hide pop over\r\n            this.SetIdle()\r\n        })\r\n        console.log(result)\r\n\r\n        // hide pop over\r\n        this.SetIdle()\r\n\r\n        // refersh role\r\n        this.UpdateRole()\r\n        alert(\"You have registered as a player\")\r\n\r\n    }\r\n    \r\n\r\n\r\n\r\n    // register player to developer\r\n    RegisterAsDeveloper = async () => {\r\n        // show pop over\r\n        this.SetWaiting()\r\n        \r\n        // call smart contract function\r\n        let result = await this.state.ConnectedContract.methods.SetMeToDeveloper()\r\n        .send({\r\n            from: this.state.ConnectedWalletAddr\r\n        }).on('error', (error) => {\r\n            alert(\"Error: Transaction Failed\")\r\n            this.SetIdle()\r\n\r\n        })\r\n        console.log(result)\r\n\r\n        // hide pop over\r\n        this.SetIdle()\r\n        \r\n        // refersh role\r\n        this.UpdateRole()\r\n        alert(\"You have registered as a developer\")\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    // render app according to current page in state\r\n    RenderHome = () => {\r\n\r\n        // return spinning if still loading\r\n        if (!this.state.ConnectedWalletAddr){//|| this.state.UserRole === \"\") {\r\n            return (\r\n                <div id=\"modulebox\" style={{height: \"100vh\"}}>\r\n                    <Spinner animation=\"border\" role=\"status\">\r\n                    </Spinner>\r\n\r\n                    <h1>Loading...</h1>\r\n                    <p>please login to your Metamask wallet and click the wallet button above if nothing happens</p>\r\n\r\n                </div>\r\n            )\r\n        }\r\n\r\n\r\n        // return page accoding to active page\r\n        switch (this.state.ActivePage) {\r\n            case 'store':\r\n                return (\r\n                    <Store \r\n                        IsConnected={this.IsWalletConnected}\r\n                        WalletAddr={this.state.ConnectedWalletAddr} \r\n                        ConnectedContract={this.state.ConnectedContract} \r\n                        RenderCards={this.RenderCards}\r\n                        ShowPopup={this.SetWaiting}\r\n                        HidePopup={this.SetIdle}\r\n                    />\r\n                )\r\n            case 'library':\r\n                return (\r\n                    <UserLibrary \r\n                        IsConnected={this.IsWalletConnected}\r\n                        WalletAddr={this.state.ConnectedWalletAddr} \r\n                        ConnectedContract={this.state.ConnectedContract} \r\n                        UserRole={this.state.UserRole} \r\n                        RenderCards={this.RenderCards}\r\n                        ShowPopup={this.SetWaiting}\r\n                        HidePopup={this.SetIdle}\r\n                    />\r\n                )\r\n            case 'p2p':\r\n                return(\r\n                    <P2PMarketplace \r\n                        IsConnected={this.IsWalletConnected}\r\n                        WalletAddr={this.state.ConnectedWalletAddr} \r\n                        ConnectedContract={this.state.ConnectedContract} \r\n                        RenderCards={this.RenderCards}\r\n                        ShowPopup={this.SetWaiting}\r\n                        UserRole={this.state.UserRole} \r\n                        HidePopup={this.SetIdle}\r\n                    />\r\n                )\r\n            default:\r\n                return <h2>ERROR</h2>\r\n        }\r\n\r\n    }\r\n\r\n    // determine if wallet is connected\r\n    IsWalletConnected = () => {\r\n        if(this.state.ConnectedWalletAddr == null) {\r\n            return false\r\n        }else {\r\n            return true\r\n        }\r\n    }\r\n    \r\n\r\n\r\n    // app navigation functions\r\n    GotoLibrary = () => {\r\n        this.setState({ ActivePage: 'library' })\r\n    }\r\n    GotoStore = () => {\r\n        this.setState({ ActivePage: 'store' })\r\n    }\r\n    GotoP2P = () => {\r\n        this.setState({ ActivePage: 'p2p' })\r\n    }\r\n    ScrollToTop = (e) => {\r\n        window.scrollTo(0, 0)\r\n    }\r\n\r\n\r\n\r\n    // toggle the waiting model\r\n    SetWaiting = () => {\r\n        console.log(\"Show waiting modal\")\r\n        this.setState({isWaitingForBlockchain: true})\r\n    }\r\n    SetIdle = () => {\r\n        console.log(\"Hide waiting modal\")\r\n        this.setState({isWaitingForBlockchain: false})\r\n    }\r\n\r\n    // toggle the change name model\r\n    SetChangingName = () => {\r\n\r\n        // if no wallet connect user cannot change name\r\n        if (this.state.ConnectedWalletAddr === null || this.state.ConnectedWalletAddr === \"\"){\r\n            alert(\"Please connect wallet first\")\r\n            return \r\n        }\r\n\r\n        this.setState({isChangingName: true})\r\n    }\r\n    SetChangingNameOff = () => {\r\n        this.setState({isChangingName: false})\r\n    }\r\n\r\n\r\n\r\n    // return user info card\r\n    RenderUserInfoCard = () => {\r\n        return(\r\n            <div id=\"playercard\">\r\n\r\n                {/* avatar */}\r\n                <div style={{ margin: \"auto\", marginTop: \"20px\", marginBottom: \"20px\"}}>\r\n                    <Jazzicon diameter={100} seed={this.state.ConnectedWalletAddr ? jsNumberForAddress(this.state.ConnectedWalletAddr) : null} />\r\n                </div>\r\n                \r\n                {/* display name */}\r\n                <OverlayTrigger placement=\"top\" overlay={ <Tooltip id='tooltip-top'>Click to <strong>Reset Display Name</strong>.</Tooltip>}>\r\n                    <Button id=\"purplebutton\" style={{ fontSize: \"16px\", marginBottom: \"20px\", borderRadius: \"25px\" }} onClick={this.SetChangingName}>{this.state.UserDisplayName === null ? `NoName` : this.state.UserDisplayName}</Button>\r\n                </OverlayTrigger>\r\n                <div id=\"playercard\" style={{ background: \"rgba(33, 33, 33, 0.8)\", display: this.state.isChangingName ? \"block\" : \"none\"}}>  \r\n                    <div style={{margin: \"auto\"}}>\r\n                        <h4>Enter New Name</h4>\r\n                        <p>Maximum 16 characters</p>\r\n                    </div>\r\n                    <InputGroup className=\"mb-3\" style={{ marginTop: \"20px\", marginBottom: \"20px\"}}>\r\n                        <FormControl ref={this.UserNameInput} autoFocus maxLength=\"16\" placeholder=\"New Username\"/>\r\n                        <Button variant=\"success\" onClick={this.SubmitNewName}>Submit</Button>\r\n                        <Button variant=\"secondary\" onClick={this.SetChangingNameOff}>Cancel</Button>\r\n                    </InputGroup>\r\n                </div>\r\n                \r\n                \r\n                <hr />\r\n\r\n                {/* wallet connection button */}\r\n                <OverlayTrigger placement=\"top\" overlay={ <Tooltip id='tooltip-top'>Click to <strong>Reconnect Wallet</strong>.</Tooltip>}>\r\n                    <Button id=\"purplebutton\" style={{ fontSize: \"16px\", marginBottom: \"40px\", borderRadius: \"25px\"}} onClick={this.Init}><strong>Connected Wallet: {this.state.ConnectedWalletAddr}</strong></Button>\r\n                </OverlayTrigger>\r\n\r\n                {/* user role badge */}\r\n                <div id=\"playerbadge\">\r\n                    Role: {this.state.UserRole === null ? \"Loading...\" : this.state.UserRole}\r\n                </div>\r\n                {this.state.UserRole === \"Guest\" ? <Button style={{marginBottom: \"40px\", backgroundColor:\"#8D12C1\", border: \"2px solid black\"}} onClick={this.RegisterAsPlayer} variant=\"success\">Register as Player</Button> : null} \r\n                {this.state.UserRole === \"Player\" ? <Button style={{marginBottom: \"40px\", backgroundColor:\"#8D12C1\", border: \"2px solid black\"}} onClick={this.RegisterAsDeveloper} variant=\"success\">Register as Developer</Button> : null} \r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ display: \"block\", backgroundImage: `url(${bg})`, height: \"auto\", color: \"#fff\", backgroundSize: \"100%\" }}>\r\n                \r\n                {/* navbar */}\r\n                <Navbar bg=\"dark\" variant=\"dark\">\r\n                    <Container>\r\n                        <img src={ggicon1} alt=\"\" height=\"50\" style={{margin: \"auto\"}}/>\r\n                    </Container>\r\n                </Navbar>\r\n\r\n                {/* user info card */}\r\n                {this.RenderUserInfoCard()}\r\n                \r\n\r\n                {/* app nav */}\r\n                <div id=\"playercard\">\r\n                    <ButtonGroup size=\"lg\" className=\"mb-2\"  >\r\n                        <Button id=\"purplebutton\" onClick={this.GotoLibrary}>My Library</Button>\r\n                        <Button id=\"purplebutton\" onClick={this.GotoStore}>Store Page</Button>\r\n                        <Button id=\"purplebutton\" onClick={this.GotoP2P}>P2P Marketplace</Button>\r\n                    </ButtonGroup>\r\n                </div>\r\n\r\n                {/* back to top button */}\r\n                <Button id=\"purplebutton\" style={{position: \"fixed\", bottom:\"40px\", right: \"40px\", borderRadius: \"50px\", fontSize: \"25px\", zIndex: \"1\"}} onClick={this.ScrollToTop}>🔝</Button>\r\n\r\n\r\n                {/* render app */}\r\n                {this.state.UserRole == null? null: this.RenderHome()}\r\n\r\n                \r\n                {/* waiting pop over */}\r\n                <Modal\r\n                    show={this.state.isWaitingForBlockchain}\r\n                    backdrop=\"static\"\r\n                    keyboard={false}\r\n                    size=\"sm\"\r\n                    centered\r\n                    style={{ background: \"rgba(33, 33, 33, 0.8)\" }}\r\n                >\r\n                    <p style={{marginTop: \"40px\", marginBottom: \"20px\", margin: \"auto\", padding: \"20px\"}}>\r\n                        <Spinner animation=\"border\" variant=\"success\" />\r\n                    </p>\r\n                    <p style={{marginTop: \"20px\", marginBottom: \"20px\", margin: \"auto\", padding: \"20px\"}}>Waiting for Blockchain...</p>\r\n                \r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}